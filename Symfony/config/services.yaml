# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    env(MONGODB_URL): ''
    env(MONGODB_DB): ''

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.
        bind:
            $projectDir: '%kernel.project_dir%'
            $defaultMongoDb: '%env(resolve:MONGODB_DB)%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']


    MongoDB\Client:
        class: MongoDB\Client
        arguments:
            - '%env(resolve:MONGODB_URL)%'

    Symfony\Component\HttpFoundation\Session\Storage\Handler\MongoDbSessionHandler:
        arguments:
            - '@MongoDB\Client'
            - {database: 'dbSession', collection: 'session'}

    # -------------------------------------------------------------------------

    aws_delayfish:
        class: App\Service\DelayFish
        autowire: false
        arguments:
            - "@logger"
            - 1.1

    App\Service\Apa\ProductApi:
        arguments:
            $api: '@eight_points_guzzle.client.aws_webservice'
            $aws_access_key_id: '%env(AWS_ACCESS_KEY_ID)%'
            $aws_secret_access_key: '%env(AWS_SECRET_ACCESS_KEY)%'
            $aws_associate_tag: '%env(AWS_ASSOCIATE_TAG)%'
            $delayProvider: "@aws_delayfish"

    App\Service\Auth\NewstashUserProvider:
        arguments:
            $userManager: '@fos_user.user_manager'
            $properties: {facebook: 'facebookId', google: 'googleId'}

    App\Service\RatingManager:
        calls:
            - [setReviewManager, ['@App\Service\ReviewManager']]

    App\Service\ReviewManager:
        calls:
            - [setRatingManager, ['@App\Service\RatingManager']]

    # -------------------------------------------------------------------------
    # graphql

    workResolver:
        class: App\GraphQL\Resolver\WorkResolver
        calls:
            - [setWorkLoader, ['@overblog_dataloader.work_loader']]
            - [setEditionLoader, ['@overblog_dataloader.edition_loader']]
        tags:
            - { name: overblog_graphql.resolver }

    editionResolver:
        class: App\GraphQL\Resolver\EditionResolver
        calls:
            - [setWorkLoader, ['@overblog_dataloader.work_loader']]
            - [setEditionLoader, ['@overblog_dataloader.edition_loader']]
            - [setFormatLoader, ['@overblog_dataloader.format_loader']]
        tags:
            - { name: overblog_graphql.resolver }

    formatResolver:
        class: App\GraphQL\Resolver\FormatResolver
        tags:
            - { name: overblog_graphql.resolver }

    postResolver:
        class: App\GraphQL\Resolver\PostResolver
        calls:
            - [setPostLoader, ['@overblog_dataloader.post_loader']]
            - [setCommentLoader, ['@overblog_dataloader.comment_loader']]
            - [setUserLoader, ['@overblog_dataloader.user_loader']]
        tags:
            - { name: overblog_graphql.resolver }

    commentResolver:
        class: App\GraphQL\Resolver\CommentResolver
        calls:
            - [setCommentLoader, ['@overblog_dataloader.comment_loader']]
            - [setUserLoader, ['@overblog_dataloader.user_loader']]
        tags:
            - { name: overblog_graphql.resolver }

    userResolver:
        class: App\GraphQL\Resolver\UserResolver
        calls:
            - [setUserLoader, ['@overblog_dataloader.user_loader']]
        tags:
            - { name: overblog_graphql.resolver }
