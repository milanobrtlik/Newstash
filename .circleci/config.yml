version: 2

defaults: &job-defaults
  docker:
    - image: circleci/php:7.3-fpm-node-browsers-legacy

run-load-image-artifacts: &load-image-artifacts
    name: Load Images
    command: |
        docker load <workspace/newstash-php-image.tar &&
        docker load <workspace/newstash-nginx-image.tar

# -----------------------------------------------------------------------------

jobs:
    build:
        <<: *job-defaults

        steps:
            - setup_remote_docker:
                docker_layer_caching: true
            - checkout
            - run: |
                mkdir workspace

            # DEPENDENCIES
            - run: |
                sudo apt-get install yarn
            - run: |
                cd Symfony && \
                yarn install &&
                yarn encore production
            - run: |
                cd Symfony && \
                composer \
                    --ignore-platform-reqs \
                    install
            # BUILD
            - run: |
                docker build -t newstash-php-image -f docker/php/Dockerfile .
            - run: |
                docker build -t newstash-nginx-image -f docker/nginx/Dockerfile .
            - run:
                command: |
                  docker save newstash-php-image >workspace/newstash-php-image.tar &&
                  docker save newstash-nginx-image >workspace/newstash-nginx-image.tar

            - run: ls -l workspace

            - persist_to_workspace:
                root: workspace
                paths:
                    - newstash-php-image.tar
                    - newstash-nginx-image.tar

    test:
        <<: *job-defaults

        steps:
            - setup_remote_docker:
                docker_layer_caching: true
            - checkout

            - attach_workspace:
                at: workspace

            - run:
                <<: *load-image-artifacts

            - run:
                name: Run Mysql
                command: |
                    docker run \
                        --name newstash-mysql-container \
                        --add-host="mysql:127.0.0.1" \
                        --env "MYSQL_ROOT_PASSWORD=bookstash" \
                        --env "MYSQL_DATABASE=bookstash" \
                        --env "MYSQL_USER=bookstash" \
                        --env "MYSQL_PASSWORD=bookstash" \
                        -p 3306:3306 \
                        -d mysql:8

            - run:
                name: Run Mongo
                command: |
                    docker run \
                        --name mongo \
                        -p 27017:27017 \
                        -d mongo:4

            # boot the php container and have it just hang out
            - run:
                name: Start PHP-FPM
                command: |
                    docker run \
                        --net=host \
                        --add-host="mysql:127.0.0.1" \
                        --add-host="mongo:127.0.0.1" \
                        --name newstash-php-container \
                        --detach \
                        --entrypoint sh \
                        newstash-php-image \
                            -c 'sleep 10000000'

            - run: TERM=xterm ./developer/bin/devify-php-container.sh
            - run: TERM=xterm ./developer/bin/devify-mysql-container.sh

            - run:
                name: Run Unit Tests
                command: |
                    docker exec \
                        --interactive \
                        --tty \
                        --env "APP_ENV=test" \
                        --env "MAILER_URL=stub-mailer-url" \
                        --env "MONGODB_URL=mongodb://mongo:27017" \
                        --env "MONGODB_DB=newstash" \
                        --env "DATABASE_URL=mysql://bookstash:bookstash@mysql:3306/bookstash" \
                        --env "APP_PORT=8080" \
                        --env "AWS_REGION=us-east-1" \
                        --env "AWS_ACCESS_KEY_ID=stub-aws-key-id" \
                        --env "AWS_SECRET_ACCESS_KEY=stub-aws-access-key" \
                        --env "AWS_ASSOCIATE_TAG=stub-assoc-key" \
                        --env "FACEBOOK_APP_ID=stub-fb-id" \
                        --env "FACEBOOK_SECRET=stub-fb-secret" \
                        --env "GOOGLE_CLIENT_ID=stub-google-id" \
                        --env "GOOGLE_CLIENT_SECRET=stub-google-secret" \
                        --env "GAQ_ID=stub-gaq-id" \
                        --env "AMZN_AFFILIATE=stub-amzn-affil" \
                        newstash-php-container \
                            sh -c 'composer install && \
                                SYMFONY_DEPRECATIONS_HELPER=weak \
                                ./bin/phpunit --verbose --debug --coverage-text'
    push:
        <<: *job-defaults

        steps:
            - setup_remote_docker:
                docker_layer_caching: true
            - checkout

            - attach_workspace:
                at: workspace

            - run: echo "stub push container here"


    deploy:
        <<: *job-defaults

        steps:
            - setup_remote_docker:
                docker_layer_caching: true
            - checkout

            - run:
                name: Download and install Terraform
                command: |
                    mkdir tmp && cd tmp && \
                    curl -o tf.zip https://releases.hashicorp.com/terraform/0.11.11/terraform_0.11.11_linux_amd64.zip && \
                    unzip tf.zip && rm tf.zip && \
                    sudo mv /home/circleci/project/tmp/terraform /usr/local/bin

            - run:
                command: |
                    cd terraform && \
                    TF_VAR_aws_access_key="$AWS_ACCESS_KEY_ID" \
                    TF_VAR_aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
                    terraform init \
                        -backend-config="bucket=awesome-state-bucket" \
                        -backend-config="key=newstash/prod.tfstate" \
                        -backend-config="region=us-east-1"

            - run:
                command: |
                    cd terraform && \
                    TF_VAR_aws_access_key="$AWS_ACCESS_KEY_ID" \
                    TF_VAR_aws_secret_key="$AWS_SECRET_ACCESS_KEY" \
                    TF_VAR_environment="prod" \
                    terraform apply -auto-approve



# -----------------------------------------------------------------------------

workflows:
    version: 2

    commit_test:
        jobs:
            - build:
                filters:
                    branches:
                        ignore: /^master$/
            - test:
                requires:
                    - build

    deploy_by_tag:
        jobs:
            - build:
                filters:
                    tags:
                        only: /^[0-9]+\.[0-9]+\.[0-9]+$/
                    branches:
                        ignore: /.*/
            - test:
                requires:
                    - build
                filters:
                    tags:
                        only: /.*/
            - push:
                requires:
                    - test
                filters:
                    tags:
                        only: /.*/

            - deploy:
                requires:
                    - push
                filters:
                    tags:
                        only: /.*/
